_ = require('lodash')
Promise = require('bluebird')
Languages = require('../languages/')
path = require('path')

# Lazy loaded dependencies
extend = null
Analytics = null
fs = null
strip = null
yaml = null
editorconfig = null

# Misc
{allowUnsafeEval} = require 'loophole'
allowUnsafeEval ->
  Analytics = require("analytics-node")
pkg = require("../../package.json")
# Analytics
analyticsWriteKey = "u3c26xkae8"

###
Register all supported beautifiers
###
module.exports = class Beautifiers

    ###
    List of beautifier names

    To register a beautifier add it's name here
    ###
    beautifierNames: [
        'uncrustify'
        'autopep8'
        'coffee-formatter'
        'htmlbeautifier'
        'js-beautify'
        'perltidy'
        'php-cs-fixer'
        'prettydiff'
        'ruby-beautify'
        'sqlformat'
        'tidy-markdown'
        'typescript-formatter'
    ]

    ###
    List of loaded beautifiers

    Autogenerated in `constructor` from `beautifierNames`
    ###
    beautifiers: null

    ###
    All beautifier options

    Autogenerated in `constructor`
    ###
    options: null

    ###
    Languages
    ###
    languages: new Languages()

    ###
    Constructor
    ###
    constructor: ->
        console.log(@)
        @beautifiers = _.map(@beautifierNames, (name) ->
            Beautifier = require("./#{name}")
            new Beautifier()
        )
        @options = @buildOptionsForBeautifiers(@beautifiers)

    ###

    ###
    buildOptionsForBeautifiers: (beautifiers) ->
        []

    ###

    ###
    getBeautifiers: (language, options) ->
        # console.log(@beautifiers)
        _.filter(@beautifiers, (beautifier) ->
            # console.log('beautifier',beautifier, language)
            _.contains(beautifier.languages, language)
        )

    # getBeautifiersForGrammar: (grammar) ->
    #
    # getBeautifiersForExtension: (extension) ->

    beautify: (text, allOptions, grammar, filePath) ->
        # console.log(@)

        return new Promise((resolve, reject) =>

            # Get language
            fileExtension = path.extname(filePath)
            languages = @languages.getLanguages({grammar, fileExtension})

            # TODO: select appropriate language
            language = languages[0]

            # Beautify!
            unsupportedGrammar = false
            if atom.config.get("atom-beautify.disabledLanguages")?.indexOf(language) > - 1
              return resolve(null)

            # Options for Language
            console.log('allOptions', allOptions)
            options = @getOptions(language.namespace, allOptions) || {}
            # Support fallback for options
            if language.fallback?
                for fallback in language.fallback
                    # Merge current options on top of fallback options
                    console.log(fallback)
                    options = _.merge(@getOptions(fallback, allOptions) || {}, options)
            console.log('options', options)

            # Get Beautifiers
            # console.log(grammar, language)
            beautifiers = @getBeautifiers(language.name, options)
            # console.log('beautifiers', beautifiers)

            # Check if unsupported grammar
            if beautifiers.length < 1
                unsupportedGrammar = true
            else
                # TODO: select beautifier
                beautifier = beautifiers[0]

                # Transform options, if applicable
                beautifierOptions = beautifier.options[language.name]
                console.log('beautifierOptions', beautifierOptions)
                if typeof beautifierOptions is "boolean"
                    if beautifierOptions isnt true
                        # Disable options
                        options = {}
                else if typeof beautifierOptions is "object"
                    # Transform the options
                    transformedOptions = {}
                    for field, op of beautifierOptions
                        if typeof op is "string"
                            # Rename
                            transformedOptions[field] = options[op]
                        else if typeof op is "function"
                            # Transform
                            transformedOptions[field] = op(options)
                        else if typeof op is "boolean"
                            # Enable/Disable
                            if op is true
                                transformedOptions[field] = options[field]
                    # Replace old options with new transformed options
                    options = transformedOptions
                else
                    console.warn("Unsupported Language options: ",beautifierOptions)
                console.log('beautify!', beautifier, language, options)
                beautifier.beautify(text, language.name, options)
                .then(resolve)
                .catch(reject)

            # Check if Analytics is enabled
            if atom.config.get("atom-beautify.analytics")
              # Setup Analytics
              analytics = new Analytics(analyticsWriteKey)
              unless atom.config.get("atom-beautify._analyticsUserId")
                uuid = require("node-uuid")
                atom.config.set "atom-beautify._analyticsUserId", uuid.v4()
              # Setup Analytics User Id
              userId = atom.config.get("atom-beautify._analyticsUserId")
              analytics.identify userId: userId
              version = pkg.version
              analytics.track
                userId: atom.config.get("atom-beautify._analyticsUserId")
                event: "Beautify"
                properties:
                  grammar: grammar
                  version: version
                  options: allOptions
                  label: grammar
                  category: version
            #
            if unsupportedGrammar
              if atom.config.get("atom-beautify.muteUnsupportedLanguageErrors")
                return resolve(null)
              else
                reject(new Error("Unsupported language for grammar '#{grammar}'."))

        )

    findFileResults: {}

    # CLI
    getUserHome: ->
      process.env.HOME or process.env.HOMEPATH or process.env.USERPROFILE

    verifyExists: (fullPath) ->
      fs ?= require("fs")
      (if fs.existsSync(fullPath) then fullPath else null)

    # Storage for memoized results from find file
    # Should prevent lots of directory traversal &
    # lookups when liniting an entire project

    ###
    Searches for a file with a specified name starting with
    'dir' and going all the way up either until it finds the file
    or hits the root.

    @param {string} name filename to search for (e.g. .jshintrc)
    @param {string} dir directory to start search from (default:
    current working directory)
    @param {boolean} upwards should recurse upwards on failure? (default: true)

    @returns {string} normalized filename
    ###
    findFile: (name, dir, upwards=true) ->
      path ?= require("path")
      dir = dir or process.cwd()
      filename = path.normalize(path.join(dir, name))
      return @findFileResults[filename] if @findFileResults[filename] isnt `undefined`
      parent = path.resolve(dir, "../")
      if @verifyExists(filename)
        @findFileResults[filename] = filename
        return filename
      if dir is parent
        @findFileResults[filename] = null
        return null
      if upwards
        findFile name, parent
      else
        return null

    ###
    Tries to find a configuration file in either project directory
    or in the home directory. Configuration files are named
    '.jsbeautifyrc'.

    @param {string} config name of the configuration file
    @param {string} file path to the file to be linted
    @param {boolean} upwards should recurse upwards on failure? (default: true)

    @returns {string} a path to the config file
    ###
    findConfig: (config, file, upwards=true) ->
      path ?= require("path")
      dir = path.dirname(path.resolve(file))
      envs = @getUserHome()
      home = path.normalize(path.join(envs, config))
      proj = @findFile(config, dir, upwards)
      return proj if proj
      return home if @verifyExists(home)
      null
    getConfigOptionsFromSettings: (langs) ->
      config = atom.config.get('atom-beautify')
      options = {}
      # console.log(langs, config);
      # Iterate over keys of the settings
      _.every _.keys(config), (k) ->
        # Check if keys start with a language
        p = k.split("_")[0]
        idx = _.indexOf(langs, p)
        # console.log(k, p, idx);
        if idx >= 0
          # Remove the language prefix and nest in options
          lang = langs[idx]
          opt = k.replace(new RegExp("^" + lang + "_"), "")
          options[lang] = options[lang] or {}
          options[lang][opt] = config[k]
          # console.log(lang, opt);
        true
      # console.log(options);
      options


    # Look for .jsbeautifierrc in file and home path, check env variables
    getConfig: (startPath, upwards=true) ->
      # Verify that startPath is a string
      startPath = (if (typeof startPath is "string") then startPath else "")
      return {} unless startPath
      # Get the path to the config file
      configPath = @findConfig(".jsbeautifyrc", startPath, upwards)
      externalOptions = undefined
      if configPath
        fs ?= require("fs")
        contents = fs.readFileSync(configPath,
          encoding: "utf8"
        )
        unless contents
          externalOptions = {}
        else
          try
            strip ?= require("strip-json-comments")
            externalOptions = JSON.parse(strip(contents))
          catch e
            # console.log "Failed parsing config as JSON: " + configPath
            # Attempt as YAML
            try
              yaml ?= require("yaml-front-matter")
              externalOptions = yaml.safeLoad(contents)
            catch e
              console.log "Failed parsing config as YAML and JSON: " + configPath
              externalOptions = {}
      else
        externalOptions = {}
      externalOptions

    getOptionsForPath: (editedFilePath, editor) ->
      languageNamespaces = @languages.namespaces

      # Editor Options
      editorOptions = {}
      if editor?
        # Get current Atom editor configuration
        isSelection = !!editor.getSelectedText()
        softTabs = editor.softTabs
        tabLength = editor.getTabLength()
        editorOptions =
          indent_size: (if softTabs then tabLength else 1)
          indent_char: (if softTabs then " " else "\t")
          indent_with_tabs: not softTabs

      # From Package Settings
      configOptions = @getConfigOptionsFromSettings(languageNamespaces)

      # Get configuration in User's Home directory
      userHome = @getUserHome()
      # FAKEFILENAME forces `path` to treat as file path and it's parent directory
      # is the userHome. See implementation of findConfig
      # and how path.dirname(DIRECTORY) returns the parent directory of DIRECTORY
      homeOptions = @getConfig(path.join(userHome,"FAKEFILENAME"), false)

      if editedFilePath?
        # Handle EditorConfig options
        # http://editorconfig.org/
        editorconfig ?= require('editorconfig');
        editorConfigOptions = editorconfig.parse(editedFilePath);
        # Transform EditorConfig to Atom Beautify's config structure and naming
        if editorConfigOptions.indent_style is 'space'
          editorConfigOptions.indent_char = " "
          # if (editorConfigOptions.indent_size)
          #   editorConfigOptions.indent_size = config.indent_size
        else if editorConfigOptions.indent_style is 'tab'
          editorConfigOptions.indent_char = "\t"
          editorConfigOptions.indent_with_tabs = true
          if (editorConfigOptions.tab_width)
              editorConfigOptions.indent_size = editorConfigOptions.tab_width

        # Get all options in configuration files from this directory upwards to root
        projectOptions = []
        p = path.dirname(editedFilePath)
        # Check if p is root (top directory)
        while p isnt path.resolve(p,"../")
          # Get config for p
          pf = path.join(p, "FAKEFILENAME")
          pc = @getConfig(pf, false)
          # Add config for p to project's config options
          projectOptions.push(pc)
          # console.log p, pc
          # Move upwards
          p = path.resolve(p,"../")
      else
        editorConfigOptions = {}
        projectOptions = []

      # Combine all options together
      allOptions = [
        editorOptions
        configOptions
        homeOptions
        editorConfigOptions
      ]
      allOptions = allOptions.concat(projectOptions)
      # console.log(allOptions)
      return allOptions

    getOptions: (selection, allOptions) ->
        self = this
        _ ?= require("lodash")
        extend ?= require("extend")
        # console.log(selection, allOptions);
        # Reduce all options into correctly merged options.
        options = _.reduce(allOptions, (result, currOptions) ->
          containsNested = false
          collectedConfig = {}
          key = undefined
          # Check to see if config file uses nested object format to split up js/css/html options
          for key of currOptions
            # Check if is supported language
            if _.indexOf(self.languages.namespaces, key) >= 0 and typeof currOptions[key] is "object" # Check if nested object (more options in value)
              containsNested = true
              break # Found, break out of loop, no need to continue
          # console.log(containsNested, currOptions);
          # Create a flat object of config options if nested format was used
          unless containsNested
            _.merge collectedConfig, currOptions
          else
            # Merge with selected options
            # where `selection` could be `html`, `js`, 'css', etc
            # console.log(selection, currOptions[selection]);
            _.merge collectedConfig, currOptions[selection]
          extend result, collectedConfig
        , {} )
        # TODO: Clean.
        # There is a bug in nopt
        # See https://github.com/npm/nopt/issues/38#issuecomment-45971505
        # console.log('pre-clean', JSON.stringify(options));
        #options = cleanOptions(options, knownOpts);
        #console.log('post-clean', JSON.stringify(options));
        options